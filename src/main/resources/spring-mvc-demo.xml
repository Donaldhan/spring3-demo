<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
	http://www.springframework.org/schema/mvc
    http://www.springframework.org/schema/mvc/spring-mvc.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-3.2.xsd">
	<!-- In a Spring MVC application, you may configure a custom ConversionService 
		instance explicitly as an attribute of the annotation-driven element of the 
		MVC namespace. This ConversionService will then be used anytime a type conversion 
		is required during Controller model binding. If not configured explicitly, 
		Spring MVC will automatically register default formatters and converters 
		for common types such as numbers and dates. To rely on default formatting 
		rules, no custom configuration is required in your Spring MVC config XML: -->
	<mvc:annotation-driven />
	<!-- The implicitly registered post-processors include AutowiredAnnotationBeanPostProcessor, 
		CommonAnnotationBeanPostProcessor, PersistenceAnnotationBeanPostProcessor, 
		as well as the aforementioned RequiredAnnotationBeanPostProcessor . <context:annotation-config/> 
		only looks for annotations on beans in the same application context in which 
		it is defined. This means that, if you put <context:annotation-config/> in 
		a WebApplicationContext for a DispatcherServlet, it only checks for @Autowired 
		beans in your controllers, and not your services. See Section 17.2, “The 
		DispatcherServlet” for more information. -->
	<context:annotation-config />

	<!-- The use of <context:component-scan> implicitly enables the functionality 
		of <context:annotation-config>. There is usually no need to include the <context:annotation-config> 
		element when using <context:component-scan>. Furthermore, the AutowiredAnnotationBeanPostProcessor 
		and CommonAnnotationBeanPostProcessor are both included implicitly when you 
		use the component-scan element. That means that the two components are autodetected 
		and wired together - all without any bean configuration metadata provided 
		in XML -->
	<context:component-scan base-package="cn.home" />
	<!-- <context:component-scan base-package="org.example"> <context:include-filter 
		type="regex" expression=".*Stub.*Repository" /> <context:exclude-filter type="annotation" 
		expression="org.springframework.stereotype.Repository" /> </context:component-scan> -->

	<bean class="example.SimpleMovieCatalog">
		<qualifier value="main" />
		<!-- inject any dependencies required by this bean -->
	</bean>

	<bean class="example.SimpleMovieCatalog">
		<qualifier value="action" />
		<!-- inject any dependencies required by this bean -->
	</bean>

	<bean id="movieRecommender" class="example.MovieRecommender" />

</beans>